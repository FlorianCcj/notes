********
Concepts
********

:source: https://kubernetes.io/docs/concepts/

Overview
########

Kubernetes Objects
*******************

The basic Kubernetes objects include:
* Pod
* Service
* Volume
* Namespace

Kubernetes contains a number of higher-level abstractions called Controllers which add functionnality as:
* ReplicaSet
* Deployment
* StatefulSet
* DaemonSet
* Job

Why do I need Kubernetes and what can it do
********************************************

* Service discovery and load balancing
* Storage orchestration
* Automated rollouts and rollbacks
* Automatic bin packing
* Self-healing
* Secret and configuration management

Component
*********

* Master: The Kubernetes Master is a collection of three processes
    * kube-apiserver: The Kubernetes API server validates and configures data for the api objects which include 
        pods, services, replicationcontrollers, and others. The API Server services REST operations and provides 
        the frontend to the clusterâ€™s shared state through which all other components interact.
        deprecation-policy: https://kubernetes.io/docs/reference/using-api/deprecation-policy/
    * kube-controller-manager: The Kubernetes controller manager is a daemon that embeds the core control loops 
        shipped with Kubernetes. In applications of robotics and automation, a control loop is a non-terminating
        loop that regulates the state of the system. In Kubernetes, a controller is a control loop that watches 
        the shared state of the cluster through the apiserver and makes changes attempting to move the current 
        state towards the desired state. Examples of controllers that ship with Kubernetes today are the 
        replication controller, endpoints controller, namespace controller, and serviceaccounts controller.
    * kube-scheduler: The Kubernetes scheduler is a policy-rich, topology-aware, workload-specific function 
        that significantly impacts availability, performance, and capacity. The scheduler needs to take into 
        account individual and collective resource requirements, quality of service requirements, 
        hardware/software/policy constraints, affinity and anti-affinity specifications, data locality, 
        inter-workload interference, deadlines, and so on. Workload-specific requirements will be exposed 
        through the API as necessary
* Node Component:
    * Kubelet: which communicates with the Kubernetes Master, It makes sure that containers are running in a pod.
    * Kube-Proxy: a network proxy which reflects Kubernetes networking services on each node, kube-proxy is a network proxy that runs on each node in the cluster.
    * Container runtime
* Addons
    * DNS
    * Web UI (Dashboard)
    * Container Resource Monitoring
    * Cluster-level Logging

API
***

* access: https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/
* deprecation: https://kubernetes.io/docs/reference/using-api/deprecation-policy/

:code:`/openapi/v2` : permit to access api

Kubernetes Objects
******************

What is
=======

K8S Object management
=====================

Names
=====

Namespace
=========

Labels and selectors
====================

Annotations
===========

Fields selectors
================

Recommended Labels
==================

Kubernetes Architecture
***********************

Containers
**********

Workloads
*********

Services, Load Balancing and Networking
***************************************

Storage
*******

Configuration
*************

Security
********

Scheduling
**********

Policies
********

Cluster Administration
**********************

Extending Kubernetes
********************