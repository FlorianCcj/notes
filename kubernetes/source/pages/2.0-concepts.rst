********
Concepts
********

:source: https://kubernetes.io/docs/concepts/

Overview
########

Kubernetes Objects
*******************

The basic Kubernetes objects include:
* Pod
* Service
* Volume
* Namespace

Kubernetes contains a number of higher-level abstractions called Controllers which add functionnality as:
* ReplicaSet
* Deployment
* StatefulSet
* DaemonSet
* Job

Why do I need Kubernetes and what can it do
********************************************

* Service discovery and load balancing
* Storage orchestration
* Automated rollouts and rollbacks
* Automatic bin packing
* Self-healing
* Secret and configuration management

Component
*********

* Master: The Kubernetes Master is a collection of three processes
    * :code:`kube-apiserver`: The Kubernetes API server validates and configures data for the api objects which include 
      pods, services, replicationcontrollers, and others. The API Server services REST operations and provides 
      the frontend to the cluster’s shared state through which all other components interact.
      deprecation-policy: https://kubernetes.io/docs/reference/using-api/deprecation-policy/
    * :code:`kube-controller-manager`: The Kubernetes controller manager is a daemon that embeds the core control loops 
      shipped with Kubernetes. In applications of robotics and automation, a control loop is a non-terminating
      loop that regulates the state of the system. In Kubernetes, a controller is a control loop that watches 
      the shared state of the cluster through the apiserver and makes changes attempting to move the current 
      state towards the desired state. Examples of controllers that ship with Kubernetes today are the 
      replication controller, endpoints controller, namespace controller, and serviceaccounts controller.
    * :code:`kube-scheduler`: The Kubernetes scheduler is a policy-rich, topology-aware, workload-specific function 
      that significantly impacts availability, performance, and capacity. The scheduler needs to take into 
      account individual and collective resource requirements, quality of service requirements, 
      hardware/software/policy constraints, affinity and anti-affinity specifications, data locality, 
      inter-workload interference, deadlines, and so on. Workload-specific requirements will be exposed 
      through the API as necessary
* Node Component:
    * :code:`Kubelet`: which communicates with the Kubernetes Master, It makes sure that containers are running in a pod.
    * :code:`Kube-Proxy`: a network proxy which reflects Kubernetes networking services on each node, kube-proxy is a network proxy that runs on each node in the cluster.
    * :code:`Container runtime`
* Addons
    * DNS
    * Web UI (Dashboard)
    * Container Resource Monitoring
    * Cluster-level Logging

API
***

* access: https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/
* deprecation: https://kubernetes.io/docs/reference/using-api/deprecation-policy/

:code:`/openapi/v2` : permit to access api

Kubernetes Objects
******************

What is
=======

Entity which describe:

* which applications is running and in which node
* resource available in which applications
* policies around it (restart, upgrade, fault-tolerance, ...)

2 main thing:

* spec: discribe what you want for the object
* status: discribe what the object is really

Object s desciption s example

.. literalinclude:: ../codes/applications/deployment.yml

:code:`kubectl apply -f https://k8s.io/examples/application/deployment.yaml --record`

required fields:

* :code:`apiVersion` - Which version of the Kubernetes API you’re using to create this object
* :code:`kind` - What kind of object you want to create
* :code:`metadata` - Data that helps uniquely identify the object, including a :code:`name` string, :code:`UID`, and optional :code:`namespace`
* :code:`spec` - Different for each kind of object

K8S Object management
=====================

:source: https://kubernetes.io/docs/concepts/overview/working-with-objects/object-management/

+----------------------------------+----------------------+--------------------------+--------------------+----------------+
| Management technique             | Operates on          | Recommended environment  | Supported writers  | Learning curve |
+==================================+======================+==========================+====================+================+
| Imperative commands              | Live objects         | Development projects     | 1+                 | Lowest         |
+----------------------------------+----------------------+--------------------------+--------------------+----------------+
| Imperative object configuration  | Individual files     | Production projects      | 1                  | Moderate       |
+----------------------------------+----------------------+--------------------------+--------------------+----------------+
| Declarative object configuration | Directories of files | Production projects      | 1+                 | Highest        |
+----------------------------------+----------------------+--------------------------+--------------------+----------------+

Imperative commands
-------------------

* :code:`kubectl run nginx --image nginx`
* <=> :code:`kubectl create deployment nginx --image nginx`

Advantages compared to object configuration:
    * simple, easy to learn and to remember.
    * require only a single step to make changes to the cluster.
Disadvantages compared to object configuration:
    * do not integrate with change review processes.
    * do not provide an audit trail associated with changes.
    * do not provide a source of records except for what is live.
    * do not provide a template for creating new object

Imperative object configuration
-------------------------------

* :code:`kubectl create -f nginx.yaml`
* :code:`kubectl delete -f nginx.yaml -f redis.yaml`
* :code:`kubectl replace -f nginx.yaml`

* Advantages compared to imperative commands:
    * Object configuration can be stored in a source control system such as Git.
    * Object configuration can integrate with processes such as reviewing changes before push and audit trails.
    * Object configuration provides a template for creating new objects.
* Disadvantages compared to imperative commands:
    * Object configuration requires basic understanding of the object schema.
    * Object configuration requires the additional step of writing a YAML file.
* Advantages compared to declarative object configuration:
    * Imperative object configuration behavior is simpler and easier to understand.
    * As of Kubernetes version 1.5, imperative object configuration is more mature.
* Disadvantages compared to declarative object configuration:
    * Imperative object configuration works best on files, not directories.
    * Updates to live objects must be reflected in configuration files, or they will be lost during the next replacement.

Declarative object configuration
--------------------------------

* :code:`kubectl diff -f configs/`
* :code:`kubectl apply -f configs/`
* :code:`kubectl diff -R -f configs/ # recursive`
* :code:`kubectl apply -R -f configs/`

* Advantages compared to imperative object configuration:
    * Changes made directly to live objects are retained, even if they are not merged back into the configuration files.
    * Declarative object configuration has better support for operating on directories and automatically detecting operation types (create, patch, delete) per-object.
* Disadvantages compared to imperative object configuration:
    * Declarative object configuration is harder to debug and understand results when they are unexpected.
    * Partial updates using diffs create complex merge and patch operations.

.. include:: 2.1.5-k8s_object-object_spec.rst
.. include:: 2.2-k8s_architecture.rst
.. include:: 2.3-containers.rst
.. include:: 2.4-worload.rst
.. include:: 2.5-service_and_network.rst
.. include:: 2.6-storage.rst
.. include:: 2.7-conf.rst
.. include:: 2.8-secu.rst
.. include:: 2.9-scheduling.rst
.. include:: 2.10-policies.rst
.. include:: 2.11-admin.rst

Extending Kubernetes
********************

Extending your Kubernetes Cluster
=================================

Extending the Kubernetes API
============================

Extending the Kubernetes API with the aggregation layer
-------------------------------------------------------

Custom Resources
----------------

Compute, Storage, and Networking Extensions
===========================================

Network Plugins
---------------

Device Plugins
--------------

Operator pattern
================

Service Catalog
===============

Poseidon-Firmament - An alternate scheduler
===========================================
