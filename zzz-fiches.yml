- fiches:
  - 
    title: bash-how to replace a str in an str
    tags:
      - bash
      - str
      - replacement
    content: >
      Substring Replacement: $(var//paterne_to_replace/with_what_you_want_to_replace)
      First substring replacement: ${string/substring/replacement}
      All substring replacement: ${string//substring/replacement}
      just remove: echo ${stringZ/abc}
      remove all: echo ${stringZ//abc}
      slash replacement: $(site//\//_)
  - 
    title: bash-for
    tags:
      - bash
      - array
      - for
      - boucle
    content: >
      for((i=0;i<${#a[@]};i++)); do
        ...
      done
      for site in ${sites[*]}; do
        ...
      done
  - 
    title: bash-how to concat array
    tags:
      - bash
      - array
      - concat
    content: >
      sites=($(echo ${sites[*]}) $(echo ${forge[*]}))
      sites=(
        $(echo ${db[*]})
        $(echo ${forge[*]})
        $(echo ${framework[*]})
        $(echo ${hosts[*]})
        $(echo ${old_hosts[*]})
        $(echo ${server[*]})
      )
  - 
    title: bash-how to count lign
    tags:
      - bash
      - count
      - size
    content: >
      wc -l $1
  - 
    title: vscode-how to autoindent
    tags:
      - vscode
      - autoindent
      - shortcut
    content: >
      ctrl+shift+I
  -
    title: soft for live usb
    tag:
      - soft
      - live usb
      - unix
    content: >
      unetbootin
  - 
    title: gitlab runner addon
    tag:
      - gitlab
      - runner
      - auddon
      - autodeploy
      - garbage collector
    content: >
      https://github.com/v2tec/watchtower
      https://github.com/spotify/docker-gc
  -
    title: git du pauvre
    tag:
      - git
      - repository
      - shared
      - ssh
    source: https://raymii.org/s/tutorials/Shared_Git_repository_via_ssh_for_multiple_users.html
    content: >
      permission:
        /etc/group -> gitusers:x:2222:user1,user2,user3,user4
        n.b. : they need to have an account on the computer (adduser user/useradd user)
      folder:
        repo_name=/var/git/repository
        mkdir -p ${repo_name}
        chgrp gitusers ${repo_name}
        chmod g+ws ${repo_name}
      repository:
        cd ${repo_name}
        git init --bare --shared=group
        git clone git+ssh://user1@gitserver/var/git/repository
      script:
        #!/bin/bash
        # A simple script which makes the above easier. This assuming the group is gitusers and the root path is /var/git/.
        GITGROUP="gitusers"
        REPOPATH="/var/git"
        if [[ -z "$1" ]]; then
            echo "You must specify a repo name"
            echo "./$0 repo_name"
            exit 1
        fi
        mkdir "${PATH}/$1"
        chgrp "${GITGROUP}" "${PATH}/$1"
        chmod 2775 "${PATH}/$1"
        pushd "${PATH}/$1"
        git init --bare --shared=group
        popd
        echo "Created repo $1."
        echo "Clone URL: git+ssh://$(hostname -f)${PATH}/$1"
  -
    title: ansible check file
    tag:
      - ansible
      - file
      - exist
    source: https://raymii.org/s/tutorials/Ansible_-_Only_if_a_file_exists_or_does_not_exist.html
    content: >
      - name: check if rules file exists
        stat: 
          path: /etc/shorewall/rules
        register: shorewall_rules
      - name: example
        debug:
          msg: 'file doesn t exist'
        when: stat_result.stat.exists == False
  -
    title: find all installed package dependencies
    tag:
      - bash
      - apt
      - apt-get
      - bebian
      - ubuntu
      - dependencies
    source: https://raymii.org/s/software/Recursively_find_all_installed_package_dependencies.html
    content: >
      script:
        #!/bin/bash
        # Small script to recursively show dependencies of packages
        # Author: Remy van Elst <raymii.org>

        pkgdep() {
          apt-cache depends --installed $1 | awk -F\: '{print $2}' | grep -v -e '<' -e '>' | awk 'NF'
        }

        for i in $(pkgdep $1); do
          pkgdep $i
        done | sort -u
      use: bash dep.sh build-essential
  -
    title: system info
    tag:
      - kernel
      - os
      - bash
    content: >
      ```
      lsb_release -d: os info
      echo "$(lsb_release -d | awk -F: '{ print $2 }' | tr -d '\t')"
      uname -a: Kernel
      ```
  -
    title: windows key
    tag:
      - power shell
      - windows
      - windows10
      - license
    content: >
      windows 10
      RMB begininf menu -> Windows PowerShell (admin)
      wmic path softwareLicensingService get OA3xOriginalProductKey
  - 
    title: docker-compose multiple instance
    tag:
      - multi instance
      - multiple instance
      - docker
      - docker-compose
      - volume
    source: https://github.com/moby/moby/issues/30770
    content: >
      docker-compose up --scale app=5
      ```
      volumes:
        data:
          name: '{{.Service.Name}}-{{.Task.Slot}}-vol'
          driver: cloudstor:aws
  -
    title: HD free space
    tag:
      - bash
      - free space
      - HD
    content: >
      echo $(df -B 1G . | awk 'NR == 2 {print $4}')
      step=1 && if [[ "$(df -B 1G /var/host/media | awk 'NR == 2 {print $4}')" -le "${step}" ]]; then echo "coucou"; fi
  -
    title: Modifier l’emplacement des données de Docker
    tag:
      - docker
      - config
      - stockage
    source: https://dev.pierre-galvez.fr/modifier-lemplacement-des-donnees-de-docker/
    content:
      service docker stop
      mkdir /dockerData
      
      vi /etc/default/docker.io
        DOCKER_OPTS="-g /dockerData"
      
      service docker start
  - 
    title: How to stop/kill a query in postgresql
    source: https://stackoverflow.com/questions/35319597/how-to-stop-kill-a-query-in-postgresql
    tag:
      - posgresql
      - infinite request
      - kill request
    content: >
      What I did is first check what are the running processes by 
      SELECT * FROM pg_stat_activity WHERE state = 'active';
      Find the process you want to kill, then type:
      SELECT pg_cancel_backend(<pid of the process>)
      If the process cannot be killed, try:
      SELECT pg_terminate_backend(<pid of the process>)
  - 
    title: ansible loop on block of task
    tag:
      - ansible
      - loop
      - group of task
      - include
    content: >
      ```
      #playbook.yml
      - hosts: servergroup
        tasks:
          - include: include.yml
            with_items: "{{ groups['servergroup'] }}"
            loop_control:
              loop_var: servername
      ```

      ```
      # include.yml
      ---
      - name: include | task 1
        debug:
          msg: "server={{ servername }}, debug task 1"
        delegate_to: '{{ servername }}'
        run_once: true

      - name: include | task 2
        debug:
          msg: "server={{ servername }}, debug task 2"
        delegate_to: '{{ servername }}'
        run_once: true
      ```

      ```
      # playbook.yml
      ---
      - include: "include/hosts.yml server={{servername}}"
        with_items: "{{ groups['groupname'] }}"
        loop_control:
          loop_var: servername
      ```

      ```
      # include.yml
      ---
      - debug:
            msg: "server={{ server }}, debug task 1"
      - debug:
            msg: "server={{ server }}, debug task 2"
      ```
  -
    title: no password for sudoers
    tag:
      - password
      - sudoers
    content: >
      add in /etc/sudoers
      florianccj ALL=(ALL:ALL) NOPASSWD: ALL
  -
    title: python and virtualenv
    source: https://docs.python-guide.org/dev/virtualenvs/
    tag:
      - python
      - virtualenv
      - pyenv
    content: >
      python --version
      pip --version

      ### pip env ###
      pip install --user pipenv
      cd myproject
      pipenv install requests

      ```
      # main.py
      import requests
      response = requests.get('https://httpbin.org/ip')
      print('Your IP is {0}'.format(response.json()['origin']))
      ```

      pipenv run python main.py

      ### lower level: virtualenv ###

      pip install virtualenv
      virtualenv --version
      cd my_project_folder
      virtualenv venv
      echo 'venv' >> .gitignore
      # choose your interpreter
      virtualenv -p /usr/bin/python2.7 venv
      # or export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python2.7
      source venv/bin/activate
      pip install requests
      deactivate
  - 
    title: pypi requirement
    source: https://docs.python-guide.org/dev/virtualenvs/
    tag:
     - pip
     - requirement
    content: >
      pip freeze > requirements.txt
      pip install -r requirements.txt
  - 
    title: python notebook
    tags:
      - pip
      - python
      - notebook
    content: >
      pip install jupyter
      jupyter notebook
  - 
    title: raise error in python
    tags:
      - python
      - error
      - raise
    content: >
      raise NameError("T as de la merde mon grand tu as un output pas clean")
  -
    title: auto launch commit hook
    tag:
      - git
      - hook
      - autolaunch
    source:
      - https://www.viget.com/articles/two-ways-to-share-git-hooks-with-your-team/
      - https://coderwall.com/p/jp7d5q/create-a-global-git-commit-hook
      - https://pre-commit.com/
    content: >
      # look in repo if there is a directory for hook
      git config core.hooksPath hooks
      echo "Running pre-commit hook" > /path/to/my/repo/hooks/pre-commit

      git config --global core.hooksPath /path/to/my/centralized/hooks
      echo "Running pre-commit hook" > /path/to/my/centralized/hooks/pre-commit
  - 
    title: git filemode
    tag:
      - git
      - right
      - filemode
    content: >
      git config core.fileMode false
      git config --global core.fileMode false
  -
    title: docker-bench-security for user
    source: 
      - https://github.com/docker/docker-bench-security
    tags:
      - docker
      - bench
      - security
    content: >
      #aborted_check="" \
      #    && base="check_1." && for i in {1..12}; do aborted_check+="${base}${i},";done \
      #    && aborted_check+="${base}13," \
      #    && base="check_2." && for i in {1..17}; do aborted_check+="${base}${i},";done \
      #    && aborted_check+="${base}18," \
      #    && base="check_3." && for i in {1..19}; do aborted_check+="${base}${i},";done \
      #    && aborted_check+="${base}20," \
      #    && base="check_7." && for i in {1..9}; do aborted_check+="${base}${i},";done \
      #    && aborted_check+="${base}10"
      aborted_check="" \
          && base="check_" && for major in 1 2 3 7; do \
          for minor in {1..20}; do aborted_check+="${base}${major}.${minor},";done; \
          done \
          && aborted_check+="whatever"
      docker run -it --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /var/lib:/var/lib \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /usr/lib/systemd:/usr/lib/systemd \
          -v /etc:/etc --label docker_bench_security \
          docker/docker-bench-security \
          -e ${aborted_check} \
          -t <my docker>
  - 
    title: bash loop
    source:
      - https://www.cyberciti.biz/faq/bash-for-loop/
    tags:
      - bash
      - loop
      - for
      - infinite
    content: >
      #!/bin/bash
      for i in 1 2 3 4 5
      do
        echo "Welcome $i times"
      done

      for i in {1..5}
      do
        echo "Welcome $i times"
      done

      echo "Bash version ${BASH_VERSION}..."
      for i in {0..10..2}
        do 
          echo "Welcome $i times"
      done

      for (( ; ; ))
      do
        echo "infinite loops [ hit CTRL+C to stop]"
      done
  -
    title: bash-concat string
    source:
      -
    tags:
      - string
      - bash
      - concat
    content: >
      a='hello'
      b='world'
      c="$a$b"

      $ A="X Y"
      $ A+="Z"
    